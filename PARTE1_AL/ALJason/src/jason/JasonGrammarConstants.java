/* Generated By:JavaCC: Do not edit this line. JasonGrammarConstants.java */
package jason;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JasonGrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int ARRAY = 10;
  /** RegularExpression Id. */
  int ENDWHILE = 11;
  /** RegularExpression Id. */
  int PROGRAM = 12;
  /** RegularExpression Id. */
  int BEGIN = 13;
  /** RegularExpression Id. */
  int FUNCTION = 14;
  /** RegularExpression Id. */
  int READ = 15;
  /** RegularExpression Id. */
  int THEN = 16;
  /** RegularExpression Id. */
  int CALL = 17;
  /** RegularExpression Id. */
  int IF = 18;
  /** RegularExpression Id. */
  int REAL = 19;
  /** RegularExpression Id. */
  int TYPES = 20;
  /** RegularExpression Id. */
  int DO = 21;
  /** RegularExpression Id. */
  int INTEGER = 22;
  /** RegularExpression Id. */
  int RECORD = 23;
  /** RegularExpression Id. */
  int UNTIL = 24;
  /** RegularExpression Id. */
  int ELSE = 25;
  /** RegularExpression Id. */
  int PARAMETERS = 26;
  /** RegularExpression Id. */
  int RETURN = 27;
  /** RegularExpression Id. */
  int VARIABLES = 28;
  /** RegularExpression Id. */
  int END = 29;
  /** RegularExpression Id. */
  int SET = 30;
  /** RegularExpression Id. */
  int WHILE = 31;
  /** RegularExpression Id. */
  int ENDIF = 32;
  /** RegularExpression Id. */
  int PROCEDURE = 33;
  /** RegularExpression Id. */
  int STRING = 34;
  /** RegularExpression Id. */
  int WRITE = 35;
  /** RegularExpression Id. */
  int ENDUNTIL = 36;
  /** RegularExpression Id. */
  int RETURNS = 37;
  /** RegularExpression Id. */
  int VAR = 38;
  /** RegularExpression Id. */
  int STRING_LITERAL = 39;
  /** RegularExpression Id. */
  int DIGIT = 42;
  /** RegularExpression Id. */
  int LETTER = 43;
  /** RegularExpression Id. */
  int IDENTIFIER = 44;
  /** RegularExpression Id. */
  int REAL_LITERAL = 45;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 46;
  /** RegularExpression Id. */
  int DOT = 47;
  /** RegularExpression Id. */
  int SEMICOLON = 48;
  /** RegularExpression Id. */
  int COMMA = 49;
  /** RegularExpression Id. */
  int PARENT_OPEN = 50;
  /** RegularExpression Id. */
  int PARENT_CLOSE = 51;
  /** RegularExpression Id. */
  int EQUAL = 52;
  /** RegularExpression Id. */
  int LESS = 53;
  /** RegularExpression Id. */
  int LESS_E = 54;
  /** RegularExpression Id. */
  int GREATER = 55;
  /** RegularExpression Id. */
  int GREATER_E = 56;
  /** RegularExpression Id. */
  int NEQUAL = 57;
  /** RegularExpression Id. */
  int PLUS = 58;
  /** RegularExpression Id. */
  int MINUS = 59;
  /** RegularExpression Id. */
  int MULT = 60;
  /** RegularExpression Id. */
  int DIV = 61;
  /** RegularExpression Id. */
  int AND = 62;
  /** RegularExpression Id. */
  int BACKSLASH = 63;
  /** RegularExpression Id. */
  int NOT = 64;
  /** RegularExpression Id. */
  int BRACKETS_OPEN = 65;
  /** RegularExpression Id. */
  int BRACKETS_CLOSE = 66;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int COMMENT = 1;
  /** Lexical state. */
  int DOUBLECOMMENT = 2;
  /** Lexical state. */
  int STR = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"/*\"",
    "\"*/\"",
    "\"/*\"",
    "<token of kind 8>",
    "<token of kind 9>",
    "\"array\"",
    "\"endwhile\"",
    "\"program\"",
    "\"begin\"",
    "\"function\"",
    "\"read\"",
    "\"then\"",
    "\"call\"",
    "\"if\"",
    "\"real\"",
    "\"types\"",
    "\"do\"",
    "\"integer\"",
    "\"record\"",
    "\"until\"",
    "\"else\"",
    "\"parameters\"",
    "\"return\"",
    "\"variables\"",
    "\"end\"",
    "\"set\"",
    "\"while\"",
    "\"endif\"",
    "\"procedure\"",
    "\"string\"",
    "\"write\"",
    "\"enduntil\"",
    "\"returns\"",
    "\"var\"",
    "\"\\\"\"",
    "<token of kind 40>",
    "\"\\\"\"",
    "<DIGIT>",
    "<LETTER>",
    "<IDENTIFIER>",
    "<REAL_LITERAL>",
    "<INTEGER_LITERAL>",
    "\".\"",
    "\";\"",
    "\",\"",
    "\"(\"",
    "\")\"",
    "\"=\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"!\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"\\\\\"",
    "\"~\"",
    "\"[\"",
    "\"]\"",
  };

}
