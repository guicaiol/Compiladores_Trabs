/* Generated By:JavaCC: Do not edit this line. JasonGrammar.java */
package jason;

public class JasonGrammar implements JasonGrammarConstants {

        public static void main(String args []) throws ParseException {
            JasonGrammar parser = new JasonGrammar(System.in);

                while(true) {
                        try {
                                parser.lexical();
                        } catch (Exception e) {
                                System.out.println(e.getMessage());
                                break;
                        } catch (Error e) {
                                System.out.println(e.getMessage());
                                break;
                        }
            }

        }

        static void print(Token t, String tokenName) {
                System.out.printf("@(%02d,%02d) %15s - %s\u005cn", t.beginLine, t.beginColumn, tokenName, t.toString());
        }

  static final public void lexical() throws ParseException, TokenMgrError, ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARRAY:
      // Keywords
        t = jj_consume_token(ARRAY);
                          print(t, "ARRAY");
      break;
    case ENDWHILE:
      t = jj_consume_token(ENDWHILE);
                          print(t, "ENDWHILE");
      break;
    case PROGRAM:
      t = jj_consume_token(PROGRAM);
                          print(t, "PROGRAM");
      break;
    case BEGIN:
      t = jj_consume_token(BEGIN);
                          print(t, "BEGIN");
      break;
    case FUNCTION:
      t = jj_consume_token(FUNCTION);
                          print(t, "FUNCTION");
      break;
    case READ:
      t = jj_consume_token(READ);
                          print(t, "READ");
      break;
    case THEN:
      t = jj_consume_token(THEN);
                          print(t, "THEN");
      break;
    case CALL:
      t = jj_consume_token(CALL);
                          print(t, "CALL");
      break;
    case IF:
      t = jj_consume_token(IF);
                                  print(t, "IF");
      break;
    case REAL:
      t = jj_consume_token(REAL);
                          print(t, "REAL");
      break;
    case TYPES:
      t = jj_consume_token(TYPES);
                          print(t, "TYPES");
      break;
    case DO:
      t = jj_consume_token(DO);
                                  print(t, "DO");
      break;
    case INTEGER:
      t = jj_consume_token(INTEGER);
                          print(t, "INTEGER");
      break;
    case RECORD:
      t = jj_consume_token(RECORD);
                          print(t, "RECORD");
      break;
    case UNTIL:
      t = jj_consume_token(UNTIL);
                          print(t, "UNTIL");
      break;
    case ELSE:
      t = jj_consume_token(ELSE);
                          print(t, "ELSE");
      break;
    case PARAMETERS:
      t = jj_consume_token(PARAMETERS);
                          print(t, "PARAMETERS");
      break;
    case RETURN:
      t = jj_consume_token(RETURN);
                          print(t, "RETURN");
      break;
    case VARIABLES:
      t = jj_consume_token(VARIABLES);
                          print(t, "VARIABLES");
      break;
    case END:
      t = jj_consume_token(END);
                                  print(t, "END");
      break;
    case SET:
      t = jj_consume_token(SET);
                                  print(t, "SET");
      break;
    case WHILE:
      t = jj_consume_token(WHILE);
                          print(t, "WHILE");
      break;
    case ENDIF:
      t = jj_consume_token(ENDIF);
                          print(t, "ENDIF");
      break;
    case PROCEDURE:
      t = jj_consume_token(PROCEDURE);
                          print(t, "PROCEDURE");
      break;
    case STRING:
      t = jj_consume_token(STRING);
                          print(t, "STRING");
      break;
    case WRITE:
      t = jj_consume_token(WRITE);
                          print(t, "WRITE");
      break;
    case ENDUNTIL:
      t = jj_consume_token(ENDUNTIL);
                          print(t, "ENDUNTIL");
      break;
    case RETURNS:
      t = jj_consume_token(RETURNS);
                          print(t, "RETURNS");
      break;
    case VAR:
      t = jj_consume_token(VAR);
                                  print(t, "VAR");
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                          print(t, "IDENTIFIER");
      break;
    case REAL_LITERAL:
      t = jj_consume_token(REAL_LITERAL);
                      print(t, "REAL_LITERAL");
      break;
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                         print(t, "INTEGER_LITERAL");
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                        print(t, "STRING_LITERAL");
      break;
    case DOT:
      t = jj_consume_token(DOT);
                                  print(t, "DOT");
      break;
    case SEMICOLON:
      t = jj_consume_token(SEMICOLON);
                          print(t, "SEMICOLON");
      break;
    case COMMA:
      t = jj_consume_token(COMMA);
                          print(t, "COMMA");
      break;
    case PARENT_OPEN:
      t = jj_consume_token(PARENT_OPEN);
                          print(t, "PARENT_OPEN");
      break;
    case PARENT_CLOSE:
      t = jj_consume_token(PARENT_CLOSE);
                      print(t, "PARENT_CLOSE");
      break;
    case EQUAL:
      t = jj_consume_token(EQUAL);
                          print(t, "EQUAL");
      break;
    case LESS:
      t = jj_consume_token(LESS);
                          print(t, "LESS");
      break;
    case LESS_E:
      t = jj_consume_token(LESS_E);
                          print(t, "LESS_E");
      break;
    case GREATER:
      t = jj_consume_token(GREATER);
                          print(t, "GREATER");
      break;
    case GREATER_E:
      t = jj_consume_token(GREATER_E);
                          print(t, "GREATER_E");
      break;
    case NEQUAL:
      t = jj_consume_token(NEQUAL);
                          print(t, "NEQUAL");
      break;
    case PLUS:
      t = jj_consume_token(PLUS);
                          print(t, "PLUS");
      break;
    case MINUS:
      t = jj_consume_token(MINUS);
                          print(t, "MINUS");
      break;
    case MULT:
      t = jj_consume_token(MULT);
                          print(t, "MULT");
      break;
    case DIV:
      t = jj_consume_token(DIV);
                                  print(t, "DIV");
      break;
    case AND:
      t = jj_consume_token(AND);
                                  print(t, "AND");
      break;
    case BACKSLASH:
      t = jj_consume_token(BACKSLASH);
                          print(t, "BACKSLASH");
      break;
    case NOT:
      t = jj_consume_token(NOT);
                                  print(t, "NOT");
      break;
    case BRACKETS_OPEN:
      t = jj_consume_token(BRACKETS_OPEN);
                       print(t, "BRACKETS_OPEN");
      break;
    case BRACKETS_CLOSE:
      t = jj_consume_token(BRACKETS_CLOSE);
                        print(t, "BRACKETS_CLOSE");
      break;
    case 0:
      t = jj_consume_token(0);
                                  System.exit(0);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public JasonGrammarTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[1];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xfffffc01,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xfffff0ff,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x7,};
   }

  /** Constructor with InputStream. */
  public JasonGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JasonGrammar(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JasonGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public JasonGrammar(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JasonGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public JasonGrammar(JasonGrammarTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(JasonGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[67];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 1; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 67; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
