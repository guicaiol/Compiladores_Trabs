/* Generated By:JavaCC: Do not edit this line. JasonGrammarConstants.java */
package jason;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JasonGrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int ARRAY = 8;
  /** RegularExpression Id. */
  int ENDWHILE = 9;
  /** RegularExpression Id. */
  int PROGRAM = 10;
  /** RegularExpression Id. */
  int BEGIN = 11;
  /** RegularExpression Id. */
  int FUNCTION = 12;
  /** RegularExpression Id. */
  int READ = 13;
  /** RegularExpression Id. */
  int THEN = 14;
  /** RegularExpression Id. */
  int CALL = 15;
  /** RegularExpression Id. */
  int IF = 16;
  /** RegularExpression Id. */
  int REAL = 17;
  /** RegularExpression Id. */
  int TYPES = 18;
  /** RegularExpression Id. */
  int DO = 19;
  /** RegularExpression Id. */
  int INTEGER = 20;
  /** RegularExpression Id. */
  int RECORD = 21;
  /** RegularExpression Id. */
  int UNTIL = 22;
  /** RegularExpression Id. */
  int ELSE = 23;
  /** RegularExpression Id. */
  int PARAMETERS = 24;
  /** RegularExpression Id. */
  int RETURN = 25;
  /** RegularExpression Id. */
  int VARIABLES = 26;
  /** RegularExpression Id. */
  int END = 27;
  /** RegularExpression Id. */
  int SET = 28;
  /** RegularExpression Id. */
  int WHILE = 29;
  /** RegularExpression Id. */
  int ENDIF = 30;
  /** RegularExpression Id. */
  int PROCEDURE = 31;
  /** RegularExpression Id. */
  int STRING = 32;
  /** RegularExpression Id. */
  int WRITE = 33;
  /** RegularExpression Id. */
  int ENDUNTIL = 34;
  /** RegularExpression Id. */
  int RETURNS = 35;
  /** RegularExpression Id. */
  int VAR = 36;
  /** RegularExpression Id. */
  int DIGIT = 37;
  /** RegularExpression Id. */
  int LETTER = 38;
  /** RegularExpression Id. */
  int ANY_CHARACTER = 39;
  /** RegularExpression Id. */
  int IDENTIFIER = 40;
  /** RegularExpression Id. */
  int NUMERIC_LITERAL = 41;
  /** RegularExpression Id. */
  int STRING_LITERAL = 42;
  /** RegularExpression Id. */
  int DOT = 43;
  /** RegularExpression Id. */
  int SEMICOLON = 44;
  /** RegularExpression Id. */
  int COMMA = 45;
  /** RegularExpression Id. */
  int PARENT_OPEN = 46;
  /** RegularExpression Id. */
  int PARENT_CLOSE = 47;
  /** RegularExpression Id. */
  int EQUAL = 48;
  /** RegularExpression Id. */
  int LESS = 49;
  /** RegularExpression Id. */
  int GREATER = 50;
  /** RegularExpression Id. */
  int NEQUAL = 51;
  /** RegularExpression Id. */
  int PLUS = 52;
  /** RegularExpression Id. */
  int MINUS = 53;
  /** RegularExpression Id. */
  int MULT = 54;
  /** RegularExpression Id. */
  int DIV = 55;
  /** RegularExpression Id. */
  int AND = 56;
  /** RegularExpression Id. */
  int BACKSLASH = 57;
  /** RegularExpression Id. */
  int NOT = 58;
  /** RegularExpression Id. */
  int BRACKETS_OPEN = 59;
  /** RegularExpression Id. */
  int BRACKETS_CLOSE = 60;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 7>",
    "\"array\"",
    "\"endwhile\"",
    "\"program\"",
    "\"begin\"",
    "\"function\"",
    "\"read\"",
    "\"then\"",
    "\"call\"",
    "\"if\"",
    "\"real\"",
    "\"types\"",
    "\"do\"",
    "\"integer\"",
    "\"record\"",
    "\"until\"",
    "\"else\"",
    "\"parameters\"",
    "\"return\"",
    "\"variables\"",
    "\"end\"",
    "\"set\"",
    "\"while\"",
    "\"endif\"",
    "\"procedure\"",
    "\"string\"",
    "\"write\"",
    "\"enduntil\"",
    "\"returns\"",
    "\"var\"",
    "<DIGIT>",
    "<LETTER>",
    "<ANY_CHARACTER>",
    "<IDENTIFIER>",
    "<NUMERIC_LITERAL>",
    "<STRING_LITERAL>",
    "\".\"",
    "\";\"",
    "\",\"",
    "\"(\"",
    "\")\"",
    "\"=\"",
    "\"<\"",
    "\">\"",
    "\"!\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"\\\\\"",
    "\"~\"",
    "\"[\"",
    "\"]\"",
  };

}
