/* Generated By:JavaCC: Do not edit this line. JasonGrammar.java */
package jason;

public class JasonGrammar implements JasonGrammarConstants {
  public static void main(String args []) throws ParseException
  {
    JasonGrammar parser = new JasonGrammar(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter a Jason code:\u005cn");
      try
      {
        switch (JasonGrammar.program())
        {
          case 0 :
                System.out.println("OK.");
          break;
          case 1 :
                System.out.println("Goodbye.");
          break;
          default :
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        JasonGrammar.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

  static final public int program() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROGRAM:
      header();
      declSec();
      block();
      jj_consume_token(DOT);
    {if (true) return 0;}
      break;
    case DOT:
      jj_consume_token(DOT);
    {if (true) return 1;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void header() throws ParseException {
    jj_consume_token(PROGRAM);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(SEMICOLON);
  }

  static final public void block() throws ParseException {
    jj_consume_token(BEGIN);
    statements();
    jj_consume_token(END);
  }

  static final public void declSec() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPES:
      typeDeclSec();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLES:
      varDeclSec();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNCTION:
    case PROCEDURE:
      subProgramDecls();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
  }

  static final public void typeDeclSec() throws ParseException {
    jj_consume_token(TYPES);
    typeDecls();
  }

  static final public void typeDecls() throws ParseException {
    typeDecl();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      typeDecls();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
  }

  static final public void typeDecl() throws ParseException {
    jj_consume_token(IDENTIFIER);
    typeSpecification();
  }

  static final public void typeSpecification() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARRAY:
      arraySpecification();
      break;
    case RECORD:
      recordSpecification();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void arraySpecification() throws ParseException {
    jj_consume_token(ARRAY);
    dataType();
    jj_consume_token(BRACKETS_OPEN);
    jj_consume_token(NUMERIC_LITERAL);
    jj_consume_token(BRACKETS_CLOSE);
    jj_consume_token(SEMICOLON);
  }

  static final public void recordSpecification() throws ParseException {
    jj_consume_token(RECORD);
    varDecls();
    jj_consume_token(END);
    jj_consume_token(SEMICOLON);
  }

  static final public void varDeclSec() throws ParseException {
    jj_consume_token(VARIABLES);
    varDecls();
  }

  static final public void varDecls() throws ParseException {
    varDecl();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REAL:
    case INTEGER:
    case STRING:
    case IDENTIFIER:
      varDecls();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
  }

  static final public void varDecl() throws ParseException {
    dataType();
    idList();
    jj_consume_token(SEMICOLON);
  }

  static final public void dataType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REAL:
      jj_consume_token(REAL);
      break;
    case INTEGER:
      jj_consume_token(INTEGER);
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void idList() throws ParseException {
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      idList2();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
  }

  static final public void idList2() throws ParseException {
    jj_consume_token(COMMA);
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      idList2();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
  }

  static final public void subProgramDecls() throws ParseException {
    subProgramDecl();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNCTION:
    case PROCEDURE:
      subProgramDecls();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
  }

  static final public void subProgramDecl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROCEDURE:
      procDecl();
      break;
    case FUNCTION:
      functionDecl();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void procDecl() throws ParseException {
    procHeader();
    subProgramDeclSec();
    block();
    jj_consume_token(SEMICOLON);
  }

  static final public void procHeader() throws ParseException {
    jj_consume_token(PROCEDURE);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(SEMICOLON);
  }

  static final public void subProgramDeclSec() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARAMETERS:
      paramDeclSec();
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    declSec();
  }

  static final public void paramDeclSec() throws ParseException {
    jj_consume_token(PARAMETERS);
    paramDecls();
  }

  static final public void paramDecls() throws ParseException {
    paramDecl();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REAL:
    case INTEGER:
    case STRING:
    case VAR:
    case IDENTIFIER:
      paramDecls2();
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
  }

  static final public void paramDecls2() throws ParseException {
    paramDecl();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REAL:
    case INTEGER:
    case STRING:
    case VAR:
    case IDENTIFIER:
      paramDecls2();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  static final public void paramDecl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REAL:
    case INTEGER:
    case STRING:
    case IDENTIFIER:
      dataType();
      jj_consume_token(IDENTIFIER);
      jj_consume_token(SEMICOLON);
      break;
    case VAR:
      jj_consume_token(VAR);
      dataType();
      jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void functionDecl() throws ParseException {
    functionHeader();
    subProgramDeclSec();
    functionBlock();
    jj_consume_token(SEMICOLON);
  }

  static final public void functionHeader() throws ParseException {
    jj_consume_token(FUNCTION);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(RETURNS);
    dataType();
    jj_consume_token(SEMICOLON);
  }

  static final public void functionBlock() throws ParseException {
    jj_consume_token(BEGIN);
    statements();
    returnStatement();
    jj_consume_token(END);
  }

  static final public void statements() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case READ:
    case CALL:
    case IF:
    case UNTIL:
    case SET:
    case WHILE:
    case WRITE:
      statement();
      jj_consume_token(SEMICOLON);
      statements();
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
  }

  static final public void statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case READ:
      jj_consume_token(READ);
      variable();
      break;
    case SET:
      jj_consume_token(SET);
      variable();
      jj_consume_token(EQUAL);
      expression();
      break;
    case WRITE:
      jj_consume_token(WRITE);
      variable();
      break;
    case IF:
      jj_consume_token(IF);
      condition();
      jj_consume_token(THEN);
      statements();
      elseClause();
      break;
    case WHILE:
      jj_consume_token(WHILE);
      condition();
      jj_consume_token(DO);
      statements();
      jj_consume_token(ENDWHILE);
      break;
    case UNTIL:
      jj_consume_token(UNTIL);
      condition();
      jj_consume_token(DO);
      statements();
      jj_consume_token(ENDUNTIL);
      break;
    case CALL:
      jj_consume_token(CALL);
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARENT_OPEN:
        argList();
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void elseClause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      statements();
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    jj_consume_token(ENDIF);
  }

  static final public void returnStatement() throws ParseException {
    jj_consume_token(SEMICOLON);
    jj_consume_token(RETURN);
    condition();
  }

  static final public void argList() throws ParseException {
    jj_consume_token(PARENT_OPEN);
    arguments();
    jj_consume_token(PARENT_CLOSE);
  }

  static final public void arguments() throws ParseException {
    argument();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      arguments2();
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
  }

  static final public void arguments2() throws ParseException {
    jj_consume_token(COMMA);
    argument();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      arguments2();
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
  }

  static final public void condition() throws ParseException {
    compoundCondition();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BACKSLASH:
      condition2();
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
  }

  static final public void condition2() throws ParseException {
    jj_consume_token(BACKSLASH);
    compoundCondition();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BACKSLASH:
      condition2();
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
  }

  static final public void compoundCondition() throws ParseException {
    simpleCondition();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      compoundCondition2();
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
  }

  static final public void compoundCondition2() throws ParseException {
    jj_consume_token(AND);
    simpleCondition();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      compoundCondition2();
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
  }

  static final public void simpleCondition() throws ParseException {
    expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
    case LESS:
    case GREATER:
    case NEQUAL:
      relOp();
      expression();
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
  }

  static final public void expression() throws ParseException {
    term();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      expression2();
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
  }

  static final public void expression2() throws ParseException {
    addOp();
    term();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      expression2();
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
  }

  static final public void term() throws ParseException {
    unary();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULT:
    case DIV:
      term2();
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
  }

  static final public void term2() throws ParseException {
    multOp();
    unary();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULT:
    case DIV:
      term2();
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
  }

  static final public void unary() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      unary();
      break;
    case MINUS:
      jj_consume_token(MINUS);
      unary();
      break;
    case IDENTIFIER:
    case NUMERIC_LITERAL:
    case STRING_LITERAL:
    case PARENT_OPEN:
    case NOT:
      factor();
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARENT_OPEN:
        argList();
        break;
      default:
        jj_la1[32] = jj_gen;
        variableNI();
      }
      break;
    case NUMERIC_LITERAL:
      jj_consume_token(NUMERIC_LITERAL);
      break;
    case STRING_LITERAL:
      jj_consume_token(STRING_LITERAL);
      break;
    case NOT:
      jj_consume_token(NOT);
      factor();
      break;
    case PARENT_OPEN:
      jj_consume_token(PARENT_OPEN);
      condition();
      jj_consume_token(PARENT_CLOSE);
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void variableNI() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BRACKETS_OPEN:
      jj_consume_token(BRACKETS_OPEN);
      expression();
      jj_consume_token(BRACKETS_CLOSE);
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      variable2();
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
  }

  static final public void variable() throws ParseException {
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BRACKETS_OPEN:
      jj_consume_token(BRACKETS_OPEN);
      expression();
      jj_consume_token(BRACKETS_CLOSE);
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      variable2();
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
  }

  static final public void variable2() throws ParseException {
    jj_consume_token(DOT);
    variable();
  }

  static final public void relOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      jj_consume_token(EQUAL);
      break;
    case NEQUAL:
      jj_consume_token(NEQUAL);
      break;
    case GREATER:
      jj_consume_token(GREATER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
        jj_consume_token(EQUAL);
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      break;
    case LESS:
      jj_consume_token(LESS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
        jj_consume_token(EQUAL);
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void addOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void multOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULT:
      jj_consume_token(MULT);
      break;
    case DIV:
      jj_consume_token(DIV);
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void argument() throws ParseException {
    condition();
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public JasonGrammarTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[43];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x400,0x40000,0x4000000,0x80001000,0x0,0x200100,0x120000,0x120000,0x0,0x0,0x80001000,0x80001000,0x1000000,0x120000,0x120000,0x120000,0x3041a000,0x0,0x3041a000,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x800,0x0,0x0,0x0,0x100,0x0,0x101,0x101,0x2000,0x2000,0x0,0x0,0x0,0x111,0x111,0x111,0x2,0x4000,0x2,0x0,0x2000,0x2000,0x2000000,0x2000000,0x1000000,0x1000000,0xf0000,0x300000,0x300000,0xc00000,0xc00000,0x4304700,0x4000,0x4004700,0x8000000,0x800,0x8000000,0x800,0x10000,0x10000,0xf0000,0x300000,0xc00000,};
   }

  /** Constructor with InputStream. */
  public JasonGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JasonGrammar(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JasonGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public JasonGrammar(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JasonGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public JasonGrammar(JasonGrammarTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(JasonGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[61];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 43; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 61; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
