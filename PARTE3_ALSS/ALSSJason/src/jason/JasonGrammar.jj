/**
 * Universidade de São Paulo - USP (São Carlos)
 * SCC0605 - Teoria da Computação e Compiladores - 2016/1
 *
 * TRABALHO PRÁTICO 3 - ANALISADOR SEMÂNTICO
 * Alunos:
 * Guilherme Caixeta de Oliveira - 8504368
 * Lucas Marques Rovere - 8139750
 * Luiz Felipe Machado Votto - 8504006
 * Victor Palombo Silvano - 7961012
 */
 options{  static = true;
  ignore_case = true;}PARSER_BEGIN(JasonGrammar)package jason;

import semantics.SemanticAnalyser;

public class JasonGrammar {

  	private static SemanticAnalyser sa;
  
	public static void main(String args []) throws ParseException {
	    JasonGrammar parser = new JasonGrammar(System.in);
	    sa = new SemanticAnalyser();
	    
		while(true) {
			try {
				if(parser.program()==0) {
				  	System.out.println("SUCESSO!\n");
					break;
				}
			} catch (Exception e) {
				System.out.println(e.getMessage());
				break;
			} catch (Error e) {
				System.out.println(e.getMessage());
				break;
			}
	    }
	}

}PARSER_END(JasonGrammar)SKIP: {
  " " | "\r" | "\t" | "\n"
| "/*" : COMMENT
}

< COMMENT > SKIP : {
  "*/" : DEFAULT
| "/*" : DOUBLECOMMENT
}

< COMMENT > MORE : {
  < ~[] >
}

< DOUBLECOMMENT > MORE : {
  < ~[] >
}

TOKEN : { /* KEYWORDS */
  < ARRAY  : "array" >
| < ENDWHILE  : "endwhile" >
| < PROGRAM  : "program" >
| < BEGIN  : "begin" >
| < FUNCTION  : "function" >
| < READ  : "read" >
| < THEN  : "then" >
| < CALL  : "call" >
| < IF  : "if" >
| < REAL  : "real" >
| < TYPES  : "types" >
| < DO  : "do" >
| < INTEGER  : "integer" >
| < RECORD  : "record" >
| < UNTIL  : "until" >
| < ELSE  : "else" >
| < PARAMETERS  : "parameters" >
| < RETURN  : "return" >
| < VARIABLES  : "variables" >
| < END  : "end" >
| < SET  : "set" >
| < WHILE  : "while" >
| < ENDIF  : "endif" >
| < PROCEDURE  : "procedure" >
| < STRING  : "string" >
| < WRITE  : "write" >
| < ENDUNTIL  : "enduntil" >
| < RETURNS  : "returns" >
| < VAR  : "var" >
}

< STR > TOKEN : {
	< STRING_LITERAL : "\"" > : DEFAULT
}

< STR > MORE : {
  < ~["\n", "\r"] >
}

MORE : {
  "\"" : STR
}

TOKEN : { /* OTHER TOKENS */
  < #DIGIT : [ "0"-"9" ] >
| < #LETTER : [ "a"-"z" ] | [ "A"-"Z" ] >
| < IDENTIFIER : < LETTER > (< LETTER > | < DIGIT >)* >
| < REAL_LITERAL : (< DIGIT >)+ < DOT > | < DOT > (< DIGIT >)+ | (< DIGIT >)+ < DOT > (< DIGIT >)+  >
| < INTEGER_LITERAL : (< DIGIT >)+ >
| < DOT  : "." >
| < SEMICOLON : ";" >
| < COMMA  : "," >
| < PARENT_OPEN  : "(" >
| < PARENT_CLOSE : ")" >
| < EQUAL : "=" >
| < LESS : "<" >
| < LESS_E : "<=" >
| < GREATER : ">" >
| < GREATER_E : ">=" >
| < NEQUAL : "!" >
| < PLUS : "+" >
| < MINUS : "-" >
| < MULT : "*" >
| < DIV : "/" >
| < AND : "&" >
| < BACKSLASH : "\\" >
| < NOT : "~" >
| < BRACKETS_OPEN : "[" >
| < BRACKETS_CLOSE : "]" >
}int program() :{}{
  header() declSec() block() < DOT >  {    return 0;  }}

void header() :
{}
{  < PROGRAM > < IDENTIFIER > < SEMICOLON > 
}

void block() :
{}{  < BEGIN > statements() < END > {sa.rs(17,null);}     
}

void declSec() :
{}
{
  [typeDeclSec()] [varDeclSec()] [subProgramDecls()]
}

void typeDeclSec() :
{}{
  < TYPES > typeDecls()
}

void typeDecls() :
{}
{
  typeDecl() [typeDecls()]
}
void typeDecl() :
{ Token t; }
{  t=< IDENTIFIER > {sa.rs(0,t);sa.rs(3,t);sa.rs(9,t);} typeSpecification()
}

void typeSpecification() :
{}
{
  arraySpecification()
| recordSpecification()
}

void arraySpecification() :
{ Token t; }
{  < ARRAY > {sa.rs(1,null);} t=dataType() {sa.rs(5,t);} < BRACKETS_OPEN > (t=< INTEGER_LITERAL > | t=< REAL_LITERAL >) {sa.rs(6,t);sa.rs(7,t);} < BRACKETS_CLOSE > < SEMICOLON > 
}

void recordSpecification() :
{}
{  < RECORD > {sa.rs(8,null);} varDecls() < END > < SEMICOLON > {sa.rs(10,null);}
}

void varDeclSec() :
{}
{  < VARIABLES > varDecls()
}

void varDecls() :
{}
{
  varDecl() [varDecls()] 
}

void varDecl() :
{}
{  dataType() idList() < SEMICOLON >
}

Token dataType() :
{ Token t; }
{  t=< REAL > { return t; }
| t=< INTEGER > { return t; }
| t=< IDENTIFIER > { sa.rs(2,t); sa.rs(4,t); return t; }
| t=< STRING > { return t; }
}

void idList() :
{ Token t; }
{
  t=< IDENTIFIER > {sa.rs(0,t); sa.rs(3,t); sa.rs(24,t);} [idList2()]
}

void idList2() :
{ Token t; }
{
  < COMMA > t=< IDENTIFIER > {sa.rs(0,t); sa.rs(3,t); sa.rs(24,t);} [idList2()]
}

void subProgramDecls() :
{}
{
  subProgramDecl() [subProgramDecls()]
}

void subProgramDecl() :
{}
{  procDecl()
| functionDecl()
}

void procDecl() :
{}
{
  procHeader() subProgramDeclSec() block() < SEMICOLON >}

void procHeader() :
{ Token t; }
{  < PROCEDURE > t=< IDENTIFIER > {sa.rs(0,t); sa.rs(3,t); sa.rs(11,t);} < SEMICOLON >
}

void subProgramDeclSec() :
{}
{  [paramDeclSec()] declSec()
}

void paramDeclSec() :
{}
{  < PARAMETERS > paramDecls()
}

void paramDecls() :
{}
{
  paramDecl() {sa.rs(12,null);} [paramDecls2()]
}

void paramDecls2() :
{}
{
  paramDecl() {sa.rs(12,null);} [paramDecls2()] 
}

void paramDecl() :
{ Token t; }
{  t=dataType() {sa.rs(13,t);} t=< IDENTIFIER > {sa.rs(0,t); sa.rs(3,t); sa.rs(14,t);} < SEMICOLON >
| < VAR > t=dataType() {sa.rs(13,t);} t=< IDENTIFIER > {sa.rs(0,t); sa.rs(3,t); sa.rs(14,t);}
}

void functionDecl() :
{}
{  functionHeader() subProgramDeclSec() functionBlock() < SEMICOLON >
}

void functionHeader() :
{ Token t; }
{  < FUNCTION > t=< IDENTIFIER > {sa.rs(0,t); sa.rs(3,t); sa.rs(15,t);} <RETURNS > t=dataType() {sa.rs(16,t);} < SEMICOLON >
}

void functionBlock() :
{}
{
	< BEGIN > functionStatements() < END > {sa.rs(17,null);}
}

void functionStatements() :
{}
{
  statement() < SEMICOLON > (functionStatements() | returnStatement())
| < SEMICOLON > returnStatement()
}

void statements() :
{}
{
  [statement() [< SEMICOLON > statements()]] 
}

void statement() :
{ Token t; }
{  < READ > variable()
| < SET > variable() < EQUAL > expression()
| < WRITE > variable()
| < IF > condition() < THEN > statements() elseClause()
| < WHILE > condition() < DO > statements() < ENDWHILE >
| < UNTIL > condition() < DO > statements() < ENDUNTIL >
| < CALL > t=< IDENTIFIER > {sa.rs(2,t); sa.rs(20,t);} [argList()]
}

void elseClause() :{}
{  [< ELSE > statements()] < ENDIF >
}

void returnStatement() :
{}
{
  < RETURN > < PARENT_OPEN > condition() < PARENT_CLOSE >
}

void argList() :
{}
{  < PARENT_OPEN > arguments() < PARENT_CLOSE >
}

void arguments() :
{}
{
  argument() {sa.rs(27,null);} [arguments2()] {sa.rs(28,null);}
}

void arguments2() :
{}
{
  < COMMA > argument() {sa.rs(27,null);} [arguments2()]
}

void condition() :
{}
{
  compoundCondition() [condition2()]
}

void condition2() :
{}
{
  < BACKSLASH > compoundCondition() [condition2()]
}

void compoundCondition() :
{}
{
  simpleCondition() [compoundCondition2()]
}

void compoundCondition2() :
{}
{
  < AND > simpleCondition() [compoundCondition2()]
}

void simpleCondition() :
{}
{  expression() [relOp() expression()]
}

void expression() :
{}
{
  term() [expression2()]
}

void expression2() :
{}
{
  addOp() term() [expression2()]
}

void term() :
{}
{
  unary() [term2()]
}

void term2() :
{}
{
  multOp() unary() [term2()]
}

void unary() :
{}
{
  < PLUS > unary()
| < MINUS > unary()
| factor()
}

void factor() :
{ Token t; }
{
  t=< IDENTIFIER > {sa.rs(2,t);} ( {sa.rs(19,t);} argList() | {sa.rs(23,t);} variableNI())
| t=< INTEGER_LITERAL > {sa.rs(21,t);}
| t=< REAL_LITERAL > {sa.rs(21,t);}
| t=< STRING_LITERAL > {sa.rs(22,t);}
| < NOT > factor()
| < PARENT_OPEN > condition() < PARENT_CLOSE >
}

void variableNI() :
{}
{  [< BRACKETS_OPEN > {sa.rs(25,null);} expression() < BRACKETS_CLOSE >] [variable2()]
}

void variable() :
{}
{
  < IDENTIFIER > [< BRACKETS_OPEN > expression() < BRACKETS_CLOSE >] [variable2()]
}

void variable2() :
{ Token t; }
{
  < DOT > t=< IDENTIFIER > {sa.rs(26,t);sa.rs(23,t);} [< BRACKETS_OPEN > {sa.rs(25,null);} expression() < BRACKETS_CLOSE >] [variable2()]
}

void relOp() :
{}
{  < EQUAL >
| < NEQUAL >
| < GREATER > [< EQUAL >]
| < LESS > [< EQUAL >] 
}

void addOp() :
{}
{  < PLUS >
| < MINUS >
}

void multOp() :
{}
{  < MULT >
| < DIV >
}

void argument() :
{}
{  condition()
}

